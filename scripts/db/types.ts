import type { Generated, Insertable, Selectable, Updateable } from "kysely";
import type { AccountRow, TokenRow } from "../AnyscanPuller";

export interface Database {
  accounts: AccountsTable;
  tokens: TokensTable;
}

type AccountsTable = {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;

  chainId: number;
  label: string;
  created_at: Generated<string>;
  updated_at: Generated<string>;
} & AccountRow;

// You should not use the table schema interfaces directly. Instead, you should
// use the `Selectable`, `Insertable` and `Updateable` wrappers. These wrappers
// make sure that the correct types are used in each operation.
//
// Most of the time you should trust the type inference and not use explicit
// types at all. These types can be useful when typing function arguments.
export type Account = Selectable<AccountsTable>;
export type NewAccount = Insertable<AccountsTable>;
export type AccountUpdate = Updateable<AccountsTable>;

type TokensTable = {
  id: Generated<number>;
  chainId: number;
  label: string;
  created_at: Generated<string>;
  updated_at: Generated<string>;
} & TokenRow;

export type NewToken = Insertable<TokensTable>;
